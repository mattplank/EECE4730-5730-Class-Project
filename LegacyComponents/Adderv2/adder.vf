////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 13.1
//  \   \         Application : sch2hdl
//  /   /         Filename : adder.vf
// /___/   /\     Timestamp : 05/05/2011 19:36:50
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family xa9500xl -verilog "C:/Documents and Settings/User/My Documents/Dropbox/DesignProject3/Design Project 2/XilinxCode/Adderv2/adder.vf" -w "C:/Documents and Settings/User/My Documents/Dropbox/DesignProject3/Design Project 2/XilinxCode/Adderv2/adder.sch"
//Design Name: adder
//Device: xa9500xl
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module ADD4_MXILINX_adder(A0, 
                          A1, 
                          A2, 
                          A3, 
                          B0, 
                          B1, 
                          B2, 
                          B3, 
                          CI, 
                          CO, 
                          OFL, 
                          S0, 
                          S1, 
                          S2, 
                          S3);

    input A0;
    input A1;
    input A2;
    input A3;
    input B0;
    input B1;
    input B2;
    input B3;
    input CI;
   output CO;
   output OFL;
   output S0;
   output S1;
   output S2;
   output S3;
   
   wire CI_OR0;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_43;
   wire X0;
   wire X1;
   wire X2;
   wire X3;
   wire S3_DUMMY;
   
   assign S3 = S3_DUMMY;
   XOR2  I_36_168 (.I0(B3), 
                  .I1(A3), 
                  .O(X3));
   XOR2  I_36_169 (.I0(B2), 
                  .I1(A2), 
                  .O(X2));
   XOR2  I_36_170 (.I0(B1), 
                  .I1(A1), 
                  .O(X1));
   XOR2  I_36_171 (.I0(B0), 
                  .I1(A0), 
                  .O(X0));
   OR2  I_36_185 (.I0(XLXN_36), 
                 .I1(XLXN_35), 
                 .O(XLXN_28));
   OR3  I_36_186 (.I0(XLXN_39), 
                 .I1(XLXN_38), 
                 .I2(XLXN_37), 
                 .O(XLXN_34));
   OR4  I_36_187 (.I0(XLXN_43), 
                 .I1(XLXN_42), 
                 .I2(XLXN_41), 
                 .I3(XLXN_40), 
                 .O(XLXN_27));
   AND5  I_36_188 (.I0(CI_OR0), 
                  .I1(X0), 
                  .I2(X1), 
                  .I3(X2), 
                  .I4(X3), 
                  .O(XLXN_30));
   AND5  I_36_189 (.I0(B0), 
                  .I1(A0), 
                  .I2(X1), 
                  .I3(X2), 
                  .I4(X3), 
                  .O(XLXN_29));
   AND4  I_36_190 (.I0(B1), 
                  .I1(A1), 
                  .I2(X2), 
                  .I3(X3), 
                  .O(XLXN_33));
   AND3  I_36_191 (.I0(B2), 
                  .I1(A2), 
                  .I2(X3), 
                  .O(XLXN_31));
   AND2  I_36_192 (.I0(B3), 
                  .I1(A3), 
                  .O(XLXN_32));
   AND4  I_36_193 (.I0(CI_OR0), 
                  .I1(X0), 
                  .I2(X1), 
                  .I3(X2), 
                  .O(XLXN_43));
   AND4  I_36_194 (.I0(B0), 
                  .I1(A0), 
                  .I2(X1), 
                  .I3(X2), 
                  .O(XLXN_42));
   AND3  I_36_195 (.I0(B1), 
                  .I1(A1), 
                  .I2(X2), 
                  .O(XLXN_41));
   AND2  I_36_196 (.I0(B2), 
                  .I1(A2), 
                  .O(XLXN_40));
   AND3  I_36_197 (.I0(CI_OR0), 
                  .I1(X0), 
                  .I2(X1), 
                  .O(XLXN_39));
   AND3  I_36_198 (.I0(B0), 
                  .I1(A0), 
                  .I2(X1), 
                  .O(XLXN_38));
   AND2  I_36_199 (.I0(B1), 
                  .I1(A1), 
                  .O(XLXN_37));
   AND2  I_36_200 (.I0(CI_OR0), 
                  .I1(X0), 
                  .O(XLXN_36));
   AND2  I_36_201 (.I0(B0), 
                  .I1(A0), 
                  .O(XLXN_35));
   XOR2  I_36_206 (.I0(XLXN_34), 
                  .I1(X2), 
                  .O(S2));
   OR5  I_36_207 (.I0(XLXN_30), 
                 .I1(XLXN_29), 
                 .I2(XLXN_33), 
                 .I3(XLXN_31), 
                 .I4(XLXN_32), 
                 .O(CO));
   XOR2  I_36_208 (.I0(X0), 
                  .I1(CI_OR0), 
                  .O(S0));
   XOR2  I_36_209 (.I0(XLXN_28), 
                  .I1(X1), 
                  .O(S1));
   XOR2  I_36_210 (.I0(XLXN_27), 
                  .I1(X3), 
                  .O(S3_DUMMY));
   OR2  I_36_211 (.I0(XLXN_26), 
                 .I1(CI), 
                 .O(CI_OR0));
   GND  I_36_212 (.G(XLXN_26));
   AND3B1  I_36_234 (.I0(S3_DUMMY), 
                    .I1(A3), 
                    .I2(B3), 
                    .O(XLXN_24));
   AND3B2  I_36_235 (.I0(B3), 
                    .I1(A3), 
                    .I2(S3_DUMMY), 
                    .O(XLXN_25));
   OR2  I_36_238 (.I0(XLXN_24), 
                 .I1(XLXN_25), 
                 .O(OFL));
endmodule
`timescale 1ns / 1ps

module ADD8_MXILINX_adder(A, 
                          B, 
                          CI, 
                          CO, 
                          OFL, 
                          S);

    input [7:0] A;
    input [7:0] B;
    input CI;
   output CO;
   output OFL;
   output [7:0] S;
   
   wire C3;
   
   (* HU_SET = "S7_4_0" *) 
   ADD4_MXILINX_adder  S7_4 (.A0(A[4]), 
                            .A1(A[5]), 
                            .A2(A[6]), 
                            .A3(A[7]), 
                            .B0(B[4]), 
                            .B1(B[5]), 
                            .B2(B[6]), 
                            .B3(B[7]), 
                            .CI(C3), 
                            .CO(CO), 
                            .OFL(OFL), 
                            .S0(S[4]), 
                            .S1(S[5]), 
                            .S2(S[6]), 
                            .S3(S[7]));
   (* HU_SET = "XLXI_1_1" *) 
   ADD4_MXILINX_adder  XLXI_1 (.A0(A[0]), 
                              .A1(A[1]), 
                              .A2(A[2]), 
                              .A3(A[3]), 
                              .B0(B[0]), 
                              .B1(B[1]), 
                              .B2(B[2]), 
                              .B3(B[3]), 
                              .CI(CI), 
                              .CO(C3), 
                              .OFL(), 
                              .S0(S[0]), 
                              .S1(S[1]), 
                              .S2(S[2]), 
                              .S3(S[3]));
endmodule
`timescale 1ns / 1ps

module ADD16_MXILINX_adder(A, 
                           B, 
                           CI, 
                           CO, 
                           OFL, 
                           S);

    input [15:0] A;
    input [15:0] B;
    input CI;
   output CO;
   output OFL;
   output [15:0] S;
   
   wire C7;
   
   (* HU_SET = "S15_8_2" *) 
   ADD8_MXILINX_adder  S15_8 (.A(A[15:8]), 
                             .B(B[15:8]), 
                             .CI(C7), 
                             .CO(CO), 
                             .OFL(OFL), 
                             .S(S[15:8]));
   (* HU_SET = "XLXI_1_3" *) 
   ADD8_MXILINX_adder  XLXI_1 (.A(A[7:0]), 
                              .B(B[7:0]), 
                              .CI(CI), 
                              .CO(C7), 
                              .OFL(), 
                              .S(S[7:0]));
endmodule
`timescale 1ns / 1ps

module adder(A, 
             B, 
             Cout, 
             O0, 
             O1, 
             Z);

    input [31:0] A;
    input [31:0] B;
   output Cout;
   output O0;
   output O1;
   output [31:0] Z;
   
   wire XLXN_4;
   wire XLXN_5;
   
   (* HU_SET = "XLXI_1_4" *) 
   ADD16_MXILINX_adder  XLXI_1 (.A(A[15:0]), 
                               .B(B[15:0]), 
                               .CI(XLXN_5), 
                               .CO(XLXN_4), 
                               .OFL(O0), 
                               .S(Z[15:0]));
   (* HU_SET = "XLXI_2_5" *) 
   ADD16_MXILINX_adder  XLXI_2 (.A(A[31:16]), 
                               .B(B[31:16]), 
                               .CI(XLXN_4), 
                               .CO(Cout), 
                               .OFL(O1), 
                               .S(Z[31:16]));
   GND  XLXI_5 (.G(XLXN_5));
endmodule
